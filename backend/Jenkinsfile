pipeline {
  agent any
    environment {
      AWS_PUBLIC_IP = '43.201.249.248'
      SSH_CMD = 'ssh -i /root/.ssh/id_rsa ubuntu@j10s003.p.ssafy.io'
      DOCKER = 'sudo docker'
      repository = "sejinnnnnn/s003_backend"  //docker hub id와 repository 이름
      repo_name = "s003_backend"
      DOCKERHUB_CREDENTIALS = credentials('dockerhub-token-s') // jenkins에 등록해 놓은 docker hub credentials 이름
      dockerImage = ''
      REPO = "s10-s-project/S10P21S003"
    }

  stages {

    stage('Add Env Files') {
      steps {
        dir('./backend') {
          sh 'chmod -R rwx src/main/resources'
          sh 'mkdir src/main/resources/config'

          withCredentials([file(credentialsId: 'backend-keys', variable: 'keys')]) {
            sh 'cp ${keys} src/main/resources/config/keys.yml'
          }

          withCredentials([file(credentialsId: 'backend-config', variable: 'config')]) {
            sh 'cp ${config} src/main/resources/config/config'
          }

          withCredentials([file(credentialsId: 'backend-pem', variable: 'pem')]) {
            sh 'cp ${pem} src/main/resources/config/SSAIDA.pem'
          }

          withCredentials([file(credentialsId: 'backend-pem-public', variable: 'pem-public')]) {
            sh 'cp ${pem-public} src/main/resources/config/SSAIDA_public.pem'
          }
        }
      }

    }

    stage('Build') {
      steps {
        dir('./backend') {
          script {
            sh "chmod +x ./gradlew"
            sh './gradlew clean build'
          }
        }
      }
    }

//      stage('SonarQube analysis') {
//         steps {
//             withSonarQubeEnv('SonarQube-Server') {
//                 dir('./backend') {
//                     sh './gradlew sonarqube'
//                 }
//             }
//         }
//      }

    stage('Build image') {
      steps {
        script {
          // sh "cp ~/workspace/backend_please/backend/build/libs/backend-0.0.1-SNAPSHOT.jar ~/workspace/backend_please" // jar 파일을 현재 위치로 복사
          dir('./backend') {
            dockerImage = docker.build repository
          }
        }
      }
    }

    stage('Login'){
      steps{
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // docker hub 로그인
      }
    }

    stage('Push image') {
      steps {
        script {
          sh 'docker push $repository' //docker push
        }
      }
    }

    stage('Clean image') {
      steps {
        sh 'docker rmi $repository' // jenkins 컨테이너에 있는 docker image 제거
      }
    }

    stage('Deployment') {
      steps {
        script {
          try {
            sh '$SSH_CMD $DOCKER stop $repo_name'
            sh '$SSH_CMD $DOCKER rm $repo_name'
          } catch (e) {
            sh 'echo "fail to stop and remove container"'
          }
        }
        sh '$SSH_CMD $DOCKER pull $repository:latest'
        sh """$SSH_CMD $DOCKER run --name $repo_name -d -p 8081:8081 $repository -e TZ=Asia/Seoul -e MYSQL_HOST="${env.MYSQL_HOST}" -e MYSQL_USERNAME="${env.MYSQL_USERNAME}" -e MYSQL_PASSWORD="${env.MYSQL_PASSWORD}" -e DEEPL_APIKEY="${env.DEEPL_APIKEY}" -e OCI_BUCKET_NAME="${env.OCI_BUCKET_NAME}" -e OCI_BUCKET_NAME_SPACE="${env.OCI_BUCKET_NAME_SPACE}" -e OCI_REGION_URL="${env.OCI_REGION_URL}" """
//         sh '$SSH_CMD $DOCKER compose up'
      }
    }
  }

  post {
    success {
      script {
        def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
        def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
        mattermostSend (color: 'good',
        message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
        endpoint: 'https://meeting.ssafy.com/hooks/nfsx17pzyjgkdgmk19xzp6q4ae',
        channel: 'Jenkins-S003'
        )
      }
    }

    failure {
      script {
        def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
        def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
        mattermostSend (color: 'danger',
        message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
        endpoint: 'https://meeting.ssafy.com/hooks/nfsx17pzyjgkdgmk19xzp6q4ae',
        channel: 'Jenkins-S003'
        )
      }
    }
  }

}
